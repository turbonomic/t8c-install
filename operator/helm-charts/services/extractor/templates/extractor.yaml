apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
{{- if .Values.global }}
  {{- if or .Values.annotations .Values.global.annotations }}
      annotations:
    {{- with .Values.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
  {{- end }}
{{- end }}
      labels:
{{- include "labels" . | nindent 8 }}
        zone: internal
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: non-mediation
    spec:
{{- if .Values.global }}
  {{- if or .Values.serviceAccountName .Values.global.serviceAccountName }}
      serviceAccountName: {{ template "serviceAccountName" . }}
  {{- end }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "image" . }}
        imagePullPolicy: {{ template "pullPolicy" . }}
{{- if .Values.enableAwsMsk }}
        envFrom:
          - secretRef:
              name: {{ .Chart.Name }}-secret
{{- end }}
        env:
{{ template "java.setJVMEnvironmentOptions" . }}
{{ toYaml .Values.env | indent 8 }}
{{- if .Values.global }}
  {{- if or .Values.logtostdout .Values.global.logtostdout }}
        - name: LOG_TO_STDOUT
          value: "true"
  {{- end }}
{{- end }}
        ports:
          - containerPort: 8080
          - containerPort: 9001
        livenessProbe:
          httpGet:
            port: 8080
            path: /health
{{- include "common.getLivenessThresholds" . | indent 10 }}
        readinessProbe:
          httpGet:
            port: 8080
            path: /health
{{- include "common.getReadinessThresholds" . | indent 10 }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
{{ if .Values.global }}
  {{ if .Values.global.disableSameTrustStore }}
        - mountPath: /vault/trust
          name: extractor-truststore-secret
          readOnly: true
  {{- else }}
        - mountPath: /vault/trust
          name: common-truststore-secret
          readOnly: true
  {{- end }}
{{- end }}
        - mountPath: /vault/key
          name: extractor-keystore-secret
          readOnly: true
        - mountPath: /vault/mtlsSecrets
          name: extractor-mtls-secret
          readOnly: true
        - mountPath: /etc/turbonomic
          name: turbo-volume
          readOnly: true
        - mountPath: /tmp
          name: extractor-tmpfs0
{{ if .Values.splunk.enabled }}
      - name: splunk-kafka-connect
        image: "{{ .Values.image.kafkarepository }}/splunk-kafka-connect:{{ .Values.image.kafkatag }}"
        imagePullPolicy: {{ template "pullPolicy" . }}
        env:
{{- toYaml .Values.kafka.env | nindent 8 }}
        ports:
        - name: http
          containerPort: 8083
        readinessProbe:
          httpGet:
            path: /
            port: 8083
        resources:
{{ toYaml .Values.kafka.resources | indent 12 }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - mountPath: /tmp
          name: extractor-tmpfs0
{{- end }}
{{- if .Values.snowflake.enabled }}
      - name: snowflake-kafka-connect
        image: "{{ .Values.image.kafkarepository }}/snowflake-kafka-connect:{{ .Values.image.kafkatag }}"
        imagePullPolicy: {{ template "pullPolicy" . }}
        env:
{{- toYaml .Values.kafka.env | nindent 8 }}
        ports:
        - name: http
          containerPort: 8083
        readinessProbe:
          httpGet:
            path: /
            port: 8083
        resources:
{{ toYaml .Values.kafka.resources | indent 12 }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - mountPath: /tmp
          name: extractor-tmpfs0
{{- end }}
{{- if .Values.logstash.enabled }}
      - name: logstash
        image: "{{ .Values.image.logstashrepository }}/logstash:{{ .Values.image.logstashtag }}"
        imagePullPolicy: {{ template "pullPolicy" . }}
        env:
{{ toYaml .Values.logstash.env | indent 8 }}
        resources:
{{ toYaml .Values.logstash.resources | indent 12 }}
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/logstash/config
        - name: logstash-pipeline-volume
          mountPath: /usr/share/logstash/pipeline
        - name: cert-ca
          mountPath: "/etc/logstash/certificates"
          readOnly: true
{{- end }}
{{- if .Values.global }}
  {{- if .Values.global.registry }}
    {{- if .Values.global.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecret }}
    {{- else -}}
      {{- if and .Values.global.imageUsername .Values.global.imagePassword }}
      imagePullSecrets:
      - name: turbocred
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- with .Values.global.nodeSelector }}
      nodeSelector:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.affinity }}
      affinity:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.tolerations }}
      tolerations:
{{- toYaml . | nindent 8 }}
  {{- end }}
{{- end }}
      restartPolicy: Always
      volumes:
      - name: turbo-volume
        configMap:
          name: global-properties-{{ .Release.Name }}
          optional: true
      - name: extractor-truststore-secret
        secret:
          secretName: extractor-truststore-secret
          optional: true
      - name: common-truststore-secret
        secret:
          secretName: common-truststore-secret
          optional: true
      - name: extractor-keystore-secret
        secret:
          secretName: extractor-keystore-secret
          optional: true
      - name: extractor-mtls-secret
        secret:
          secretName: extractor-mtls-secret
          optional: true
      - name: extractor-tmpfs0
        emptyDir: {}
{{- if .Values.logstash.enabled }}
      - name: config-volume
        configMap:
          name: logstash-configmap
          items:
          - key: logstash.yml
            path: logstash.yml
      - name: logstash-pipeline-volume
        configMap:
          name: logstash-configmap
          items:
          - key: logstash.conf
            path: logstash.conf
      - name: cert-ca
        secret:
          secretName: {{ .Values.logstash.settings.ES_SSL_NAME }}
          optional: true
{{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
---
{{- if .Values.logstash.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
  logstash.conf: |
    input {
      kafka {
        topics => ["{{ .Release.Namespace }}.exporter"]
        bootstrap_servers => "kafka:9092"
        client_id => "logstash"
        group_id => "logstash"
        codec => "json"
        type => "json"
        session_timeout_ms => "60000"   # Rebalancing if consumer is found dead
        request_timeout_ms => "70000"   # Resend request after 70 seconds
      }
    }
    filter {
    }
    output {
      elasticsearch {
        index => "{{ .Values.logstash.settings.ES_TOPIC }}"
        hosts => [ "{{ .Values.logstash.settings.ES_HOSTS }}" ]
        user => "{{ .Values.logstash.settings.ES_USER }}"
        password => "${ES_PASSWORD}"
        manage_template => false
        ssl => "{{ .Values.logstash.settings.ES_SSL }}"
        ssl_certificate_verification => "{{ .Values.logstash.settings.ES_SSL_CRT_VER }}"
        cacert => '/etc/logstash/certificates/ca.crt'
      }
    }
---
{{- end }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  ports:
  - name: http-extractor
    port: 8080
{{- if .Values.global }}
  {{- if or .Values.debug .Values.global.debug }}
  - name: tcp-extractor-debug
    port: 8000
  {{- end -}}
{{- end }}
  - name: grpc-extractor
    port: 9001
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- if or .Values.splunk.enabled .Values.snowflake.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}-kafka-connect
  annotations:
{{- include "serviceAnnotations" . | nindent 4 }}
  labels:
{{- include "serviceLabels" . | nindent 4 }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  ports:
    - name: http-kafka-connect
      port: 8083
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}
