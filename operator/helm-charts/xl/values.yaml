# Default values for xl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
#  registry: icr.io
#  imagePullSecret: turbocred
#  imageUsername: turbouser
#  imagePassword: turbopassword
  repository: icr.io/cpopen/turbonomic
  tag: 8.7.5
#  serviceAccountName: t8c-serviceaccount
#  pullPolicy: IfNotPresent
  customImageNames: false
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  labels: {}
  serviceAnnotations: {}
  serviceLabels: {}
  # setting these to be more tolerant than the k8s defaults, since we run in some pretty resource
  # constrained environments where the readiness probe failures don't really fix anything. We should
  # adjust these back down when we have a horizontally-scaled environment.
  readinessPeriodSecs: 20
  readinessTimeoutSecs: 10
#  externalIP: 10.233.0.3 # byo k8s DNS
#              10.100.0.10 # eks DNS
#              10.0.0.10 # aks DNS
#              10.23.240.10 # gke DNS
#  externalConsul: xl-consul.ca-central-1.rds.amazonaws.com
#  externalDBName: xl-hackaton.cmachd0izjog.ca-central-1.rds.amazonaws.com
#  externalInfluxDBName: xl-influxdb.us-east-1.elb.amazonaws.com
#  externalKafka: xl-kafka.us-east-1.elb.amazonaws.com
#  externalRedis:
#  externalSyslog: a608c38591a9f11e9ad190efbcf8c7e5-1236730884.us-east-1.elb.amazonaws.com
  elk: false
#  logtostdout: false
#  debug: true
  storageAnnotations: {}
#  storageClassName: default
#  storageSelector: true
#  dbSecretName: foo
  # The above specifies the name of the Kubernetes secret holding the MariaDB credentials
  # - Relevant components are: action-orchestrator, auth, clustermgr, cost, group, history,
  #   plan-orchestrator, repository and topology-processor.
  # - Secret name is customizable for each component (by placing the same var under the
  #   component's section).
  # Secret format in yaml:
  #####################################
  # apiVersion: v1
  #   kind: Secret
  #   metadata:
  #     name: foo
  #   type: Opaque
  #   stringData:
  #     db-creds: |-
  #       username: 'db_user'
  #       password: 'db_password'
  #####################################
  # Notes:
  # - The metadata.name is the "dbSecretName" configured above
  # - The key in the data has to be the fixed word "db-creds", but it is customizable by an env
  #   var in each component as the following where the key is now "auth-creds"; this makes it
  #   possible to pack multiple credentials in the same k8s secret using different keys
  ######################################################################
  # auth:
  #   dbSecretName: foo
  #   env:
  #     ... (a copy of other env vars needed here; omitted for clarity)
  #     - name: secretsYamlPath
  #       value: file:/vault/secrets/auth-creds
  #######################################################################
  securityContext:
    fsGroup: 2000
  certmanager:
    enabled: false
    issuer: letsencrypt
    kind: ClusterIssuer
  ingress:
    # domain: *.turbonomic.com
    secrets:
    ## If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    # - name: nginx-ingressgateway-certs
    #   key:
    #   certificate:
  telemetry:
    # This just controls whether the necessary components are there to collect telemetry and store
    # it locally. Whether telemetry is sent anywhere is controlled by a UI checkbox.
    enabled: true
    # Kafka topic names. WARNING: Do not change these without making matching changes in the clustermgr.
    kafkaTopic: telemetry
    scrubbedKafkaTopic: telemetry-scrubbed
    # Telemetry sharing modes: USER_CHOICE, FORCE_ON, FORCE_OFF
    shareTelemetry: USER_CHOICE
    # Whether to enable automatic transmission of telemetry (enables the telemetry Kinesis connector).
    automatic:
      enabled: true
      # Kinesis connector instance name
      connector_name: online-telemetry
    # Intentionally opaque so that we can keep the same configuration parameter as we change
    # technologies. e.g. currently the base64 encoded string contains a username and password
    # while in the past it contained a ssh key pair.
    secret: ${telemetry-secret} # will be replaced by the actual secret during build.

    # How often to collect telemetry. Default if once a day.
    scrapeInterval: 1d
    # Currently, XL components export ~300 metrics or ~3k time series. 10k should be big enough to
    # support growth, but still prevent a bug from creating millions of new time series, flooding
    # our data warehouse solution and incurring high costs.
    sampleLimit: 10000
    # Only send metrics whose name matches this regular expression.
    # Please seek the security team guidance and review before changing this regular expression.
    metricsWhiteList: "turbo_cloud_spend_ratio|\
                        turbo_business_accounts|\
                        turbo_plans_total|\
                        turbo_reservations_total|\
                        turbo_current_reservations|\
                        turbo_current_actions|\
                        turbo_completed_actions_total|\
                        turbo_discovered_entities|\
                        turbo_broadcast_entities|\
                        turbo_targets|\
                        turbo_version_info|\
                        turbo_api_calls_total|\
                        turbo_api_call_latency_seconds_bucket|\
                        turbo_api_call_latency_seconds_count|\
                        turbo_api_call_latency_seconds_sum|\
                        turbo_component_uptime_seconds|\
                        turbo_oid_expiration_execution_seconds_sum|\
                        turbo_oid_expiration_execution_seconds_count|\
                        turbo_oid_expiration_execution_seconds_bucket|\
                        turbo_expired_entities_total|\
                        turbo_policies|\
                        turbo_automated_entities|\
                        turbo_actions|\
                        turbo_suspendable_entities|\
                        turbo_schedule_overrides|\
                        turbo_timespan_schedules|\
                        turbo_managed_workloads_count|\
                        turbo_cloud_service_quantity|\
                        turbo_cloud_service_cost"
    # Specifies which labels will be removed by the telemetry scrubber. This is a
    # space-delimited list.
    scrubbedLabels: "customer_id customer_domain"
    # This controls whether frontEnd adaptor is enabled in UI.
    # Front End Telemetry Adaptor will not collect data until user opts-in from UI
    frontEnd:
      enabled: true
    # disable plg by default
    plg:
      enabled: false
      queue_config:
        max_samples_per_send: 1000
        max_shards: 200
        capacity: 2500
nginxingress:
  enabled: true
openshiftingress:
  enabled: false
istioingress:
  enabled: false
  mtls: true
platform:
  enabled: true
ui:
  enabled: true
control:
  enabled: true
postgres:
  enabled: false
reporting:
  enabled: false
timescaledb:
  enabled: false
metron:
  enabled: false
kubeturbo:
  enabled: false
prometurbo:
  enabled: false
tunnel:
  enabled: false
training:
  enabled: false
client-network:
  enabled: false

suspend:
  enabled: true

server-power-modeler:
  enabled: true

loki:
  enabled: false
promtail:
  enabled: false
fluent-bit:
  enabled: false
prometheus:
  enabled: true
prometheus-mysql-exporter:
  enabled: false
grafana:
  enabled: false
  ## We generate grafana.ini by merging selected structures from `grafana.ini.defaults` based on
  ## deployment mode, with values specified in the CR file. Any grafana.ini parameter can be
  ## overridden in the CR file, whether it's mentioned here or not.
  grafana.ini:
    database: {}
  grafana.ini.defaults:
    # common defaults for all deployments
    _base:
      analytics:
        check_for_updates: true
      auth.proxy:
        enabled: true
        headers: Name:X-WEBAUTH-NAME
      database:
        name: grafana
        user: grafana_backend
      grafana_net:
        url: https://grafana.net
      log:
        mode: console
      reporting:
        rendering_timeout: 300s
      server:
        # This needs to be in sync with the UI, and the NGINX configuration.
        root_url: "https://%(domain)s/reports"
        serve_from_sub_path: true
      users:
        # Disallow explicit user creation.
        allow_sign_up: false
        auto_assign_org_role: Editor
        default_theme: light
    # defaults for embedded_reporting (called "_default" here because, for backward compat we will
    # recognize a missing deploymentMode as meaning an embedded-reporting deployment.
    _default:
      database:
        type: postgres
        host: timescaledb
        port: 5432
      live:
        allowed_origins: http://localhost:3000
      plugin.grafana-image-renderer:
        rendering_mode: reusable
    # defaults for saas-reporting
    SAAS:
      database:
        type: mysql
        host: db
        port: 3306
      plugins:
        allow_loading_unsigned_plugins: turbonomic-datacloud-grafana-datasource
chronograf:
  enabled: false
datacloud:
  enabled: false
datacloud-graph:
  enabled: false
intersight-integration:
  enabled: false
extractor:
  enabled: false
kinesis-kafka-connect:
  enabled: false
hydra:
  enabled: false
# Enable mediation
actionscript:
  enabled: false
actionstream-kafka:
  enabled: false
appdynamics:
  enabled: false
appinsights:
  enabled: false
aws:
  enabled: false
  metrics:
    enabled: false
baremetal:
  enabled: false
datadog:
  enabled: false
awslambda:
  enabled: false
azure:
  enabled: false
  billing:
    enabled: false
  pricing:
    enabled: false
  infra:
    enabled: false
compellent:
  enabled: false
dynatrace:
  enabled: false
flexera:
  enabled: false
gcp:
  enabled: false
  infra:
    enabled: false
hpe3par:
  enabled: false
hds:
  enabled: false
horizon:
  enabled: false
hyperflex:
  enabled: false
hyperv:
  enabled: false
powervm:
  enabled: false
ibmstorage-flashsystem:
  enabled: false
instana:
  enabled: false
intersight:
  enabled: false
mssql:
  enabled: false
mysql:
  enabled: false
oracle:
  enabled: false
tomcat:
  enabled: false
jvm:
  enabled: false
netapp:
  enabled: false
newrelic:
  enabled: false
webhook:
  enabled: false
weblogic:
  enabled: false
websphere:
  enabled: false
jboss:
  enabled: false
nutanix:
  enabled: false
oneview:
  enabled: false
pure:
  enabled: false
rhv:
  enabled: false
scaleio:
  enabled: false
servicenow:
  enabled: false
snmp:
  enabled: false
terraform:
  enabled: false
ucs:
  enabled: false
ucsdirector:
  enabled: false
udt:
  enabled: false
vcenter:
  enabled: false
vmax:
  enabled: false
vmm:
  enabled: false
vplex:
  enabled: false
wmi:
  enabled: false
xtremio:
  enabled: false
xen:
  enabled: false
metadata:
  enabled: true
metrics-processor:
  enabled: false
