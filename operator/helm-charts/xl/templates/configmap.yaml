apiVersion: v1
kind: ConfigMap
metadata:
  name: global-properties-{{ .Release.Name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  {{- $dbPorts := (include "computeDbPorts" . | mustFromJson) }}
  properties.yaml: |-
    defaultProperties:
      global:
        serverHttpPort : 8080
        serverGrpcPort : 9001
        clustermgr_retry_delay_sec : 10
        kafkaServers : kafka:9092
        kafkaNamespace : {{ .Release.Namespace }}
        telemetry:
          automatic: {{ .Values.global.telemetry.automatic.enabled }}
          kafkaTopic: {{ .Release.Namespace }}.{{ .Values.global.telemetry.kafkaTopic }}
          scrubbedKafkaTopic: {{ .Release.Namespace }}.{{ .Values.global.telemetry.scrubbedKafkaTopic }}
          connectorName: {{ .Values.global.telemetry.automatic.connector_name }}
          shareTelemetry: {{ .Values.global.telemetry.shareTelemetry }}
        deadlockCheckIntervalSecs: 900
        scheduledMetricsIntervalMs: 60000
        grpcPingIntervalSeconds: 300
        realtimeTopologyContextId: 777777
        # hostnames for each component type
        actionOrchestratorHost: action-orchestrator
        apiHost: api
        authHost: auth
        consul_host: consul
        consul_port: 8500
        consulNamespace : {{ .Release.Namespace }}
        clusterMgrHost: clustermgr
        clustermgr_port : 8080
        costHost: cost
        dbHost: db
        dbs:
          postgresDefault:
            # postgres is the correct host for everything except extractor, and there's an explicit
            # overriding setting in the extractor properties block below
            host: postgres
            port: {{ $dbPorts.postgres }}
          mysqlDefault:
            host: db
            port: {{ $dbPorts.mysql }}
          mariadbDefault:
            host: db
            port: {{ $dbPorts.mysql }}
        groupHost: group
        historyHost: history
        marketHost: market
        planOrchestratorHost: plan-orchestrator
        reportingHost: reporting
        repositoryHost: repository
        metadataHost: metadata
        topologyProcessorHost: topology-processor
        extractorHost: extractor
        suspendHost: suspend
        suspendGrpcPort: 9094
        parkingEnabled: {{ .Values.suspend.enabled }}
        frontEndTelemetryEnabled: {{ and .Values.global.telemetry.enabled .Values.global.telemetry.frontEnd.enabled }}
        # Auth
        authRetryDelaySecs: 10
        # Consul Key/Value and Service Discovery Utility
        kvStoreRetryIntervalMillis: 1000
        # Default stat retention times
        retention.numRetainedMinutes: 130
        # DB
        dbPort: {{ $dbPorts.mysql }}
        dbUsername: root
        sqlDialect: MARIADB
        mariadbHealthCheckIntervalSeconds: 60
        histEntityRiCoverageRecordsRollingWindowDays: 60
        # Mediation Component Common
        serverAddress: ws://topology-processor:8080/remoteMediation
        silentRetryTime: 0
        connRetryIntervalSeconds: 10
        # Remote iterator consumers - 10 minutes max wait for next chunk
        com.vmturbo.communication.remote.iterator.timeout: 600000
{{- if .Values.global }}
  {{- if .Values.global.enableExternalSecrets }}
    {{/* Kubernetes secrets are enabled for encryption keys. Pass that information along to the java processes. */}}
        enableExternalSecrets: true
  {{- end }}
  {{- if .Values.global.deploymentMode }}
     {{/* this was formerly in properties.global in CR file, but now it's needed internally in
          grafana chart, so it's been moved to just global. But it's still needed as a runtime
          proprerty in grafana pod, and for backward compatiblity.
      */}}
        deploymentMode: {{ .Values.global.deploymentMode }}
  {{- end }}
{{- end }}
      action-orchestrator:
        identityGeneratorPrefix: 9
        enableReporting: {{ .Values.reporting.enabled }}
        dbSchemaName: action
      api:
        identityGeneratorPrefix: 5
        publicVersionString: {{ .Values.global.tag }}
        enableReporting: {{ .Values.reporting.enabled }}
        groupBuildUseCaseFile: groupBuilderUsecases.json
        settingManagersFile: settingManagers.json
        settingStyleFile: settingSpecStyle.json
        externalApiSwaggerUri: /vmturbo/apidoc/**
        externalApiFileSystemBase: file:/swagger/
{{- if .Values.global.telemetry.plg.enabled }}
  {{- if (((.Values.prometheus).server).global).external_labels }}
        tenantId: {{ .Values.prometheus.server.global.external_labels.tenant_id | default "" }}
        ibmUniqueId: {{ .Values.prometheus.server.global.external_labels.iui | default "" }}
  {{- end }}
{{- end }}
      auth:
        dbSchemaName: auth
        identityGeneratorPrefix: 7
      cost:
        identityGeneratorPrefix: 10
        # the cost component will receive some large messages over grpc, so we will increase the max
        # DB properties
        dbSchemaName: cost
      group:
        identityGeneratorPrefix: 4
        dbSchemaName: group_component
      ml-datastore:
        influxHost: influxdb
        influxPort: 8086
        influxUsername: root
        influxDatabaseName: metron
        gzipToInflux: false
        # Setting jitterEnabled to false OR metricJitter to 0 avoids any jitter.
        jitterEnabled: false
        metricJitter: 0.05
        # Whitelist of commodities to write to influx.
        defaultCommodityWhitelist:
            BALLOONING,
            BUFFER_COMMODITY,
            REMAINING_GC_CAPACITY,
            CONNECTION,
            COOLING,
            COUPON,
            CPU,
            DB_CACHE_HIT_RATE,
            DB_MEM,
            HEAP,
            HOT_STORAGE,
            IO_THROUGHPUT,
            MEM,
            NET_THROUGHPUT,
            POWER,
            Q1_VCPU,
            Q2_VCPU,
            Q3_VCPU,
            Q4_VCPU,
            Q5_VCPU,
            Q6_VCPU,
            Q7_VCPU,
            Q8_VCPU,
            Q16_VCPU,
            Q32_VCPU,
            Q64_VCPU,
            QN_VCPU,
            RESPONSE_TIME,
            SLA_COMMODITY,
            SPACE,
            STORAGE,
            STORAGE_AMOUNT,
            STORAGE_LATENCY,
            SWAPPING,
            THREADS,
            TRANSACTION,
            TRANSACTION_LOG,
            VCPU,
            VMEM
        # Whitelist of metric types to write to influx.
        defaultMetricTypeWhitelist:
            CAPACITY,
            PEAK,
            SCALING_FACTOR,
            USED
        # Whitelist of action types to write to influx.
        defaultActionTypeWhitelist:
            PROVISION,
            ACTIVATE,
            DEACTIVATE,
            MOVE,
            RESIZE
        # Whitelist of action states to write to influx.
        defaultActionStateWhitelist:
            RECOMMENDED_ACTIONS,
            COMPLETED_ACTIONS
        # Whether we should write cluster membership information as part of our metrics.
        clustersSupported: true
      plan-orchestrator:
        dbSchemaName: plan
        # Config parameter to control the batch size for deleting old plans.
        planDeletionBatchSize: 500
        # Delay before the next batch of old plans is deleted.
        planDeletionDelayBetweenDeletesSeconds: 120
        templateSpecFile: defaultTemplateSpec.json
        defaultTemplatesFile: defaultTemplates.json
        # Time-out for the CPU Info cache; this cache is updated very infrequently.
        cpuInfoCacheLifetimeHours: 8
      topology-processor:
        # This should be in sync with the schema in the Topology Processor s pom.xml
        dbSchemaName: topology_processor
        # Urgent metrics are collected every 10 minutes, the offline every 3 days
        collectionIntervalUrgentSec: 600
        collectionIntervalOfflineSec: 259200
        bridgeHost: clustermgr
        bridgePort: 8120
      extractor:
        enableReporting: {{ .Values.reporting.enabled }}
        grafanaAdminPassword: {{ .Values.grafana.adminPassword }}
{{- if index .Values "grafana" "grafana.ini" "database" "type" }}
        grafanaDb:
{{ toYaml (index .Values "grafana" "grafana.ini" "database") | indent 12 }}
        dbs: 
          grafana:
            databaseName: {{ index .Values "grafana" "grafana.ini" "database" "name" | default "grafana" }}
            userName: {{ index .Values "grafana" "grafana.ini" "database" "user" | default "grafana_backend" }}
            password: {{ index .Values "grafana" "grafana.ini" "database" "password" }}
          postgresDefault:
            host: timescaledb
            port: {{ $dbPorts.timescale }}
{{- end }}
  {{- /*
       Suspend has its own configmap, so the majority of its settings are found there. In order
       to support IWO, the dbSchemaName needs to exist here such that it can be overridden. The
       db provisioning scripts in the Suspend project will read this value and share it with the
       Suspend app
    */}}
      suspend:
        dbSchemaName: suspend
{{- if .Values.properties }}
    customProperties:
{{ toYaml .Values.properties | indent 12 }}
{{- end }}
