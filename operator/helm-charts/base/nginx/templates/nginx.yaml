apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: public
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
{{- if .Values.global }}
  {{- if or .Values.annotations .Values.global.annotations }}
      annotations:
    {{- with .Values.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
  {{- end }}
{{- end }}
      labels:
{{- include "labels" . | nindent 8 }}
        zone: public
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
{{- if .Values.global }}
  {{- if or .Values.serviceAccountName .Values.global.serviceAccountName }}
      serviceAccountName: {{ template "serviceAccountName" . }}
  {{- end }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "image" . }}
        imagePullPolicy: {{ template "pullPolicy" . }}
        env:
        - name: API
          value: api.{{ .Release.Namespace }}.svc.cluster.local
        - name: UI
          value: ui.{{ .Release.Namespace }}.svc.cluster.local
        - name: TOPOLOGY
          value: topology-processor.{{ .Release.Namespace }}.svc.cluster.local
        - name: GRAFANA
          value: grafana.{{ .Release.Namespace }}.svc.cluster.local
        - name: AUTH
          value: auth.{{ .Release.Namespace }}.svc.cluster.local
        - name: HYDRA_PUBLIC
          value: hydra-public.{{ .Release.Namespace }}.svc.cluster.local
        - name: CLIENT_NETWORK
          value: client-network.{{ .Release.Namespace }}.svc.cluster.local
        - name: WORKER_CONNECTIONS
          value: {{ .Values.workerConnections | quote }}
        - name: WORKER_PROCESSES
          value: {{ .Values.workerProcesses | quote }}
{{ toYaml .Values.env | indent 8 }}
{{- if .Values.global }}
  {{- if .Values.global.blockRemoteProbes }}
        - name: BLOCK_REMOTE_PROBES
          value: "{{ .Values.global.blockRemoteProbes }}"
  {{- end }}
  {{- if .Values.global.whiteListIps }}
        - name: WHITE_LIST_IPS
          value: {{ join " " .Values.global.whiteListIps }}
  {{- end }}
  {{- if or .Values.logtostdout .Values.global.logtostdout }}
        - name: LOG_TO_STDOUT
          value: "true"
  {{- end }}
  {{- if or (not (or .Values.nginxIsPrimaryIngress .Values.httpsRedirect)) .Values.insecureHttpOnly }}
        - name: DISABLE_HTTPS_REDIRECT
          value: "true"
  {{- end }}
{{- end }}
        ports:
          - containerPort: 8000
          - containerPort: 8443
        livenessProbe:
          httpGet:
            path: "/healthz/ready"
            port: 8443
            scheme: HTTPS
{{- include "common.getLivenessThresholds" . | indent 10 }}
        readinessProbe:
          httpGet:
            path: "/healthz/ready"
            port: 8443
            scheme: HTTPS
{{- include "common.getReadinessThresholds" . | indent 10 }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /etc/nginx/certs
          name: nginx-certs
        - mountPath: /var/www/load-status
          name: nginx-load-status
        - mountPath: /var/cache/nginx
          name: nginx-data
        - mountPath: /var/run
          name: nginx-run
        - mountPath: /tmp
          name: nginx-tmpfs0
        - mountPath: /etc/turbonomic
          name: turbo-volume
          readOnly: true
{{- if .Values.global }}
  {{- if .Values.global.registry }}
    {{- if .Values.global.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecret }}
    {{- else -}}
      {{- if and .Values.global.imageUsername .Values.global.imagePassword }}
      imagePullSecrets:
      - name: turbocred
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- with .Values.global.nodeSelector }}
      nodeSelector:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.affinity }}
      affinity:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.tolerations }}
      tolerations:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.securityContext }}
      securityContext:
{{- toYaml . | nindent 8 }}
  {{- end }}
{{- end }}
      restartPolicy: Always
      volumes:
      - name: nginx-certs
        secret:
          secretName: "nginx-ingressgateway-certs"
          optional: true
      - name: nginx-load-status
        emptyDir: {}
      - name: nginx-data
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: nginx-tmpfs0
        emptyDir: {}
      - name: turbo-volume
        configMap:
          name: global-properties-{{ .Release.Name }}
          optional: true
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  annotations:
{{- include "serviceAnnotations" . | nindent 4 }}
{{- if .Values.global }}
  {{- with .Values.global.ingress.annotations }}
{{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
  labels:
{{- include "serviceLabels" . | nindent 4 }}
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
{{- if .Values.nginxIsPrimaryIngress }}
  type: LoadBalancer
  externalTrafficPolicy: {{ .Values.externalTrafficPolicy }}
  {{- else }}
  type: ClusterIP
{{- end }}
  ports:
{{- if not .Values.insecureHttpOnly }}
  - name: https-nginx
    port: 443
    targetPort: 8443
{{- end }}
  - name: http-nginx
    port: 80
    targetPort: 8000
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- if and .Values.global .Values.global.externalIP .Values.nginxIsPrimaryIngress }}
  externalIPs:
  - {{ .Values.global.externalIP }}
{{- end }}
{{- if .Values.global}}
---
  {{- if .Values.global.certmanager.enabled }}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: t8c-nginx-gateway
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  secretName: nginx-ingressgateway-certs
  issuerRef:
    name: {{ .Values.global.certmanager.issuer }}
    kind: {{ .Values.global.certmanager.kind }}
  commonName: {{ .Values.global.ingress.domain | default "*.turbonomic.com" | quote }}
  dnsNames:
  - {{ .Values.global.ingress.domain | default "*.turbonomic.com" | quote }}
---
  {{ else }}
    {{- if .Values.global }}
      {{- range .Values.global.ingress.secrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .name }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .certificate | b64enc }}
  tls.key: {{ .key | b64enc }}
---
      {{- end }}
    {{- end }}
  {{- end -}}
{{- end -}}
