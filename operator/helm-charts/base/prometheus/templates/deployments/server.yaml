{{- if .Values.server.enabled -}}
{{- if not .Values.server.statefulSet.enabled -}}
apiVersion: {{ template "prometheus.deployment.apiVersion" . }}
kind: Deployment
metadata:
{{- if .Values.server.deploymentAnnotations }}
  annotations:
{{ toYaml .Values.server.deploymentAnnotations | indent 4 }}
{{- end }}
  labels:
    {{- include "prometheus.server.labels" . | nindent 4 }}
  name: {{ template "prometheus.server.fullname" . }}
{{ include "prometheus.namespace" . | indent 2 }}
spec:
  selector:
    matchLabels:
      {{- include "prometheus.server.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.server.replicaCount }}
  {{- if .Values.server.strategy }}
  strategy:
{{ toYaml .Values.server.strategy | trim | indent 4 }}
    {{ if eq .Values.server.strategy.type "Recreate" }}rollingUpdate: null{{ end }}
{{- end }}
  template:
    metadata:
    {{- if .Values.server.podAnnotations }}
      annotations:
{{ toYaml .Values.server.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        app.kubernetes.io/part-of: non-mediation
        {{- include "prometheus.server.labels" . | nindent 8 }}
        {{- if .Values.server.podLabels}}
        {{ toYaml .Values.server.podLabels | nindent 8 }}
        {{- end}}
    spec:
{{- if .Values.server.priorityClassName }}
      priorityClassName: "{{ .Values.server.priorityClassName }}"
{{- end }}
{{- if .Values.server.schedulerName }}
      schedulerName: "{{ .Values.server.schedulerName }}"
{{- end }}
      serviceAccountName: {{ template "prometheus.serviceAccountName.server" . }}
      {{- if .Values.server.extraInitContainers }}
      initContainers:
{{ toYaml .Values.server.extraInitContainers | indent 8 }}
      {{- end }}
      containers:
        {{- if .Values.configmapReload.prometheus.enabled }}
        - name: {{ template "prometheus.name" . }}-{{ .Values.server.name }}-{{ .Values.configmapReload.prometheus.name }}
          image: "{{ .Values.configmapReload.prometheus.image.repository }}:{{ .Values.configmapReload.prometheus.image.tag }}"
          imagePullPolicy: "{{ .Values.configmapReload.prometheus.image.pullPolicy }}"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090{{ .Values.server.prefixURL }}/-/reload
          {{- range $key, $value := .Values.configmapReload.prometheus.extraArgs }}
            - --{{ $key }}={{ $value }}
          {{- end }}
          {{- range .Values.configmapReload.prometheus.extraVolumeDirs }}
            - --volume-dir={{ . }}
          {{- end }}
          resources:
{{ toYaml .Values.configmapReload.prometheus.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
          {{- range .Values.configmapReload.prometheus.extraConfigmapMounts }}
            - name: {{ $.Values.configmapReload.prometheus.name }}-{{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
        {{- end }}

        - name: {{ template "prometheus.name" . }}-{{ .Values.server.name }}
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: "{{ .Values.server.image.pullPolicy }}"
          {{- if or .Values.server.env (and .Values.global.telemetry.enabled .Values.global.telemetry.plg.enabled)}}
          env:
          {{- end }}
          {{- if .Values.server.env }}
{{ toYaml .Values.server.env | indent 12}}
          {{- end }}
          {{- if and .Values.global.telemetry.plg.enabled .Values.global.telemetry.enabled }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: telemetry-secret
                  key: plg_aws_access_key_id
                  optional: false
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: telemetry-secret
                  key: plg_aws_secret_access_key
                  optional: false
          {{- end}}
          args:
          {{- if .Values.server.retention }}
            - --storage.tsdb.retention.time={{ .Values.server.retention }}
          {{- end }}
            - --config.file={{ .Values.server.configPath }}
            - --storage.tsdb.path={{ .Values.server.persistentVolume.mountPath }}
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
          {{- range .Values.server.extraFlags }}
            - --{{ . }}
          {{- end }}
          {{- if .Values.server.baseURL }}
            - --web.external-url={{ .Values.server.baseURL }}
          {{- end }}

          {{- range $key, $value := .Values.server.extraArgs }}
            - --{{ $key }}={{ $value }}
          {{- end }}
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: {{ .Values.server.prefixURL }}/-/ready
              port: 9090
            initialDelaySeconds: {{ .Values.server.readinessProbeInitialDelay }}
            periodSeconds: {{ .Values.server.readinessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.server.readinessProbeTimeout }}
            failureThreshold: {{ .Values.server.readinessProbeFailureThreshold }}
            successThreshold: {{ .Values.server.readinessProbeSuccessThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.server.prefixURL }}/-/healthy
              port: 9090
            initialDelaySeconds: {{ .Values.server.livenessProbeInitialDelay }}
            periodSeconds: {{ .Values.server.livenessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.server.livenessProbeTimeout }}
            failureThreshold: {{ .Values.server.livenessProbeFailureThreshold }}
            successThreshold: {{ .Values.server.livenessProbeSuccessThreshold }}
          resources:
{{ toYaml .Values.server.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: {{ .Values.server.persistentVolume.mountPath }}
              subPath: "{{ .Values.server.persistentVolume.subPath }}"
          {{- range .Values.server.extraHostPathMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- range .Values.server.extraConfigmapMounts }}
            - name: {{ $.Values.server.name }}-{{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- range .Values.server.extraSecretMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- if .Values.server.extraVolumeMounts }}
            {{ toYaml .Values.server.extraVolumeMounts | nindent 12 }}
          {{- end }}

        - name: {{ tpl .Values.server.configManager.name . }}
          image: {{ tpl .Values.server.configManager.image.repository . }}/prometheus-config-manager:{{ tpl .Values.server.configManager.image.tag . }}
          imagePullPolicy: {{ .Values.server.configManager.image.pullPolicy }}
          args:
{{ toYaml .Values.server.configManager.args | indent 12 }}
          resources:
{{ toYaml .Values.server.configManager.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
            - name: prometheus-merged-config
              mountPath: /etc/merged-config
        {{- if .Values.global.telemetry.enabled }}
        - name: {{ .Values.server.kafkaAdapter.name }}
          image: {{ .Values.server.kafkaAdapter.image.repository }}/prometheus-kafka-adapter:{{ .Values.server.kafkaAdapter.image.tag }}
          imagePullPolicy: {{ .Values.server.configManager.image.pullPolicy }}
          args:
{{ toYaml .Values.server.kafkaAdapter.args | indent 12 }}
          env:
            - name: KAFKA_BROKER_LIST
              value: {{ .Values.server.kafkaAdapter.env.kafkaBrokerList }}
            - name: KAFKA_TOPIC
              value: {{ printf "%s.%s" .Release.Namespace .Values.global.telemetry.kafkaTopic }}
            - name: KAFKA_COMPRESSION
              value: {{ .Values.server.kafkaAdapter.env.kafkaCompression }}
            - name: KAFKA_BATCH_NUM_MESSAGES
              value: {{ quote .Values.server.kafkaAdapter.env.kafkaBatchNumMessages }}
            - name: SERIALIZATION_FORMAT
              value: {{ .Values.server.kafkaAdapter.env.serializationFormat }}
            - name: PORT
              value: {{ quote .Values.server.kafkaAdapter.env.port }}
            - name: LOG_LEVEL
              value: {{ .Values.server.kafkaAdapter.env.logLevel }}
            - name: GIN_MODE
              value: {{ .Values.server.kafkaAdapter.env.ginMode }}
          resources:
{{ toYaml .Values.server.kafkaAdapter.resources | indent 12 }}

        - name: {{ tpl .Values.server.telemetryScrubber.name . }}
          image: {{ tpl .Values.server.telemetryScrubber.image.repository . }}/telemetry-scrubber:{{ tpl .Values.server.telemetryScrubber.image.tag . }}
          imagePullPolicy: {{ .Values.server.telemetryScrubber.image.pullPolicy }}
          env:
            - name: instance_id
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_BROKER_LIST
              value: {{ .Values.server.kafkaAdapter.env.kafkaBrokerList }}
            - name: KAFKA_TOPIC
              value: {{ printf "%s.%s" .Release.Namespace .Values.global.telemetry.kafkaTopic }}
            - name: KAFKA_SCRUBBED_TOPIC
              value: {{ printf "%s.%s" .Release.Namespace .Values.global.telemetry.scrubbedKafkaTopic }}
            - name: LOG_LEVEL
              value: {{ .Values.server.telemetryScrubber.env.logLevel }}
            - name: SCRUBBED_LABELS
              value: {{ template "prometheus.server.getScrubbedLabels" . }}
          resources:
{{ toYaml .Values.server.telemetryScrubber.resources | indent 12 }}
        {{- end }}

      {{- if .Values.server.sidecarContainers }}
      {{- toYaml .Values.server.sidecarContainers | nindent 8 }}
      {{- end }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
       {{ toYaml .Values.imagePullSecrets | indent 2 }}
    {{- end }}
    {{- if .Values.server.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.server.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.server.hostAliases }}
      hostAliases:
{{ toYaml .Values.server.hostAliases | indent 8 }}
    {{- end }}
    {{- if .Values.server.securityContext }}
      securityContext:
{{ toYaml .Values.server.securityContext | indent 8 }}
    {{- end }}
    {{- if .Values.global.tolerations }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.server.affinity }}
      affinity:
{{ toYaml .Values.server.affinity | indent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.server.terminationGracePeriodSeconds }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ if .Values.server.configMapOverrideName }}{{ .Release.Name }}-{{ .Values.server.configMapOverrideName }}{{- else }}{{ template "prometheus.server.fullname" . }}{{- end }}
        - name: storage-volume
        {{- if .Values.server.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.server.persistentVolume.existingClaim }}{{ .Values.server.persistentVolume.existingClaim }}{{- else }}{{ template "prometheus.server.fullname" . }}{{- end }}
        {{- else }}
          emptyDir:
          {{- if .Values.server.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.server.emptyDir.sizeLimit }}
          {{- else }}
            {}
          {{- end -}}
        {{- end -}}
{{- if .Values.server.extraVolumes }}
{{ toYaml .Values.server.extraVolumes | indent 8}}
{{- end }}
      {{- range .Values.server.extraHostPathMounts }}
        - name: {{ .name }}
          hostPath:
            path: {{ .hostPath }}
      {{- end }}
      {{- range .Values.configmapReload.prometheus.extraConfigmapMounts }}
        - name: {{ $.Values.configmapReload.prometheus.name }}-{{ .name }}
          configMap:
            name: {{ .configMap }}
      {{- end }}
      {{- range .Values.server.extraConfigmapMounts }}
        - name: {{ $.Values.server.name }}-{{ .name }}
          configMap:
            name: {{ .configMap }}
      {{- end }}
      {{- range .Values.server.extraSecretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
      {{- end }}
      {{- range .Values.configmapReload.prometheus.extraConfigmapMounts }}
        - name: {{ .name }}
          configMap:
            name: {{ .configMap }}
      {{- end }}
{{- end -}}
{{- end -}}
