{{- if .Values.server.enabled -}}
{{- if (empty .Values.server.configMapOverrideName) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "prometheus.server.labels" . | nindent 4 }}
  name: {{ template "prometheus.server.fullname" . }}
{{ include "prometheus.namespace" . | indent 2 }}
data:
{{- $root := . -}}
{{- range $key, $value := .Values.serverFiles }}
  {{ $key }}: |
{{- if eq $key "prometheus.yml" }}
    global:
{{ $root.Values.server.global | toYaml | trimSuffix "\n" | indent 6 }}
{{- if or $root.Values.server.remoteWrite $root.Values.global.telemetry.enabled }}
    remote_write:
      {{- if $root.Values.global.telemetry.enabled }}
      - name: "kafka"
        url: "http://localhost:8080/receive"
        write_relabel_configs:
          - action: keep
            source_labels: [ job ]
            regex: telemetry
          - action: labeldrop
            regex: instance
        queue_config:
          max_backoff: 2h
      {{- end }}
      {{- if and $root.Values.global.telemetry.enabled $root.Values.global.telemetry.plg.enabled }}
      - name: "aws-prometheus"
        url: {{ ($root.Values.global.telemetry.secret | b64dec | fromYaml).plg_prometheus_url }}
        sigv4:
          region: {{ ($root.Values.global.telemetry.secret | b64dec | fromYaml).kinesis_region }}
        write_relabel_configs:
          - source_labels: [ '__name__' ]
            regex: 'turbo_discovered_entities|turbo_api_calls_total|turbo_targets|turbo_actions|turbo_plans_total|turbo_policies'
            action: 'keep'
        queue_config:
{{ toYaml $root.Values.global.telemetry.plg.queue_config | indent 10 }}
      {{- end }}
      {{- if $root.Values.server.remoteWrite }}
{{ $root.Values.server.remoteWrite | toYaml | indent 4 }}
      {{- end }}
{{- end }}
{{- if $root.Values.server.remoteRead }}
    remote_read:
{{ $root.Values.server.remoteRead | toYaml | indent 4 }}
{{- end }}
{{- end }}
{{- if eq $key "alerts" }}
{{- if and (not (empty $value)) (empty $value.groups) }}
    groups:
{{- range $ruleKey, $ruleValue := $value }}
    - name: {{ $ruleKey -}}.rules
      rules:
{{ $ruleValue | toYaml | trimSuffix "\n" | indent 6 }}
{{- end }}
{{- else }}
{{ toYaml $value | indent 4 }}
{{- end }}
{{- else }}
{{ toYaml $value | default "{}" | indent 4 }}
{{- end }}
{{- if eq $key "prometheus.yml" -}}
{{- if not $value.scrape_configs }}
    scrape_configs:
{{- end -}}
{{- if $root.Values.global.telemetry.enabled }}
    - job_name: telemetry
      scrape_interval: {{ $root.Values.global.telemetry.scrapeInterval }}
      sample_limit: {{ $root.Values.global.telemetry.sampleLimit }}
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            own_namespace: true
      relabel_configs:
        - action: replace
          source_labels:
            - __meta_kubernetes_service_name
          target_label: service
        - action: replace
          source_labels:
            - __meta_kubernetes_endpoint_port_name
          target_label: port
      metric_relabel_configs:
        - action: keep
          source_labels:
            - __name__
          regex: {{ $root.Values.global.telemetry.metricsWhiteList }}
{{- end }}
{{- if $root.Values.server.outOfTheBoxScrapeConfigs.prometheus.enabled }}
    - job_name: prometheus
      static_configs:
        - targets:
          - localhost:9090
{{- end }}
{{- if $root.Values.server.outOfTheBoxScrapeConfigs.kubernetes.enabled }}
      # A scrape configuration for running Prometheus on a Kubernetes cluster.
      # This uses separate scrape configs for cluster components (i.e. API server, node)
      # and services to allow each to use different authentication configs.
      #
      # Kubernetes labels will be added as Prometheus labels on metrics via the
      # `labelmap` relabeling action.

      # Scrape config for API servers.
      #
      # Kubernetes exposes API servers as endpoints to the default/kubernetes
      # service so this uses `endpoints` role and uses relabelling to only keep
      # the endpoints associated with the default/kubernetes service using the
      # default named port `https`. This works for single API server deployments as
      # well as HA API server deployments.
    - job_name: 'kubernetes-apiservers'

      kubernetes_sd_configs:
        - role: endpoints

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # If your node certificates are self-signed or use a different CA to the
        # master CA, then disable certificate verification below. Note that
        # certificate verification is an integral part of a secure infrastructure
        # so this should only be disabled in a controlled environment. You can
        # disable certificate verification by uncommenting the line below.
        #
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # Keep only the default/kubernetes service endpoints for the https port. This
      # will add targets for each API server which Kubernetes adds an endpoint to
      # the default/kubernetes service.
      relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

    - job_name: 'kubernetes-nodes'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # If your node certificates are self-signed or use a different CA to the
        # master CA, then disable certificate verification below. Note that
        # certificate verification is an integral part of a secure infrastructure
        # so this should only be disabled in a controlled environment. You can
        # disable certificate verification by uncommenting the line below.
        #
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
        - role: node

      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/$1/proxy/metrics


    - job_name: 'kubernetes-nodes-cadvisor'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # If your node certificates are self-signed or use a different CA to the
        # master CA, then disable certificate verification below. Note that
        # certificate verification is an integral part of a secure infrastructure
        # so this should only be disabled in a controlled environment. You can
        # disable certificate verification by uncommenting the line below.
        #
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
        - role: node

      # This configuration will work only on kubelet 1.7.3+
      # As the scrape endpoints for cAdvisor have changed
      # if you are using older version you need to change the replacement to
      # replacement: /api/v1/nodes/$1:4194/proxy/metrics
      # more info here https://github.com/coreos/prometheus-operator/issues/633
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
        - role: endpoints

      relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
        - source_labels: [__meta_kubernetes_pod_node_name]
          action: replace
          target_label: kubernetes_node

      # Scrape config for slow service endpoints; same as above, but with a larger
      # timeout and a larger interval
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape-slow`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints-slow'

      scrape_interval: 5m
      scrape_timeout: 30s

      kubernetes_sd_configs:
        - role: endpoints

      relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
        - source_labels: [__meta_kubernetes_pod_node_name]
          action: replace
          target_label: kubernetes_node

    - job_name: 'prometheus-pushgateway'
      honor_labels: true

      kubernetes_sd_configs:
        - role: service

      relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
          action: keep
          regex: pushgateway

      # Example scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
    - job_name: 'kubernetes-services'

      metrics_path: /probe
      params:
        module: [http_2xx]

      kubernetes_sd_configs:
        - role: service

      relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
          action: keep
          regex: true
        - source_labels: [__address__]
          target_label: __param_target
        - target_label: __address__
          replacement: blackbox
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name

      # Example scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
    - job_name: 'kubernetes-pods'

      kubernetes_sd_configs:
        - role: pod

      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
{{- end }}
{{- if $root.Values.server.outOfTheBoxScrapeConfigs.xl.enabled }}
      # Scrape config for xl core components
      #
    - job_name: 'xl'
      {{- if $root.Values.server.outOfTheBoxScrapeConfigs.xl.lightweight }}
      scrape_interval: 5m
      metric_relabel_configs:
        - action: keep
          source_labels:
            - __name__
          regex: "turbo_api_call_latency_seconds_sum|\
                  turbo_api_call_latency_seconds_count|\
                  plan_run_time_seconds_sum|\
                  plan_run_time_seconds_count|\
                  turbo_api_calls_total|\
                  grpc_server_handled_total|\
                  grpc_server_handled_latency_seconds_sum|\
                  grpc_server_handled_latency_seconds_count|\
                  jvm_gc_collection_seconds_sum|\
                  jvm_memory_bytes_used|\
                  jvm_memory_bytes_max|\
                  turbo_managed_workloads_count"
      {{- end }}
      kubernetes_sd_configs:
        - role: endpoints
          {{- if not $root.Values.server.useClusterRole }}
          namespaces:
            own_namespace: true
          {{- end }}
      relabel_configs:
        - action: keep
          source_labels:
            - __meta_kubernetes_service_name
          regex: ^(action-orchestrator|api|auth|clustermgr|cost|group|history|market|ml-datastore|plan-orchestrator|repository|topology-processor)$
        - action: drop
          source_labels:
            - __meta_kubernetes_endpoint_port_name
          regex: ^(tcp-.*|grpc-.*|https-.*)$
        - action: replace
          source_labels:
            - __meta_kubernetes_service_name
          target_label: service
        - action: replace
          source_labels:
            - __meta_kubernetes_service_name
          replacement: service
          target_label: component
        - action: replace
          source_labels:
            - __meta_kubernetes_endpoint_node_name
          target_label: node
        - action: replace
          source_labels:
            - __meta_kubernetes_namespace
          target_label: namespace

      # Scrape config for xl mediation components
      #
    - job_name: 'xl-mediation'
      {{- if $root.Values.server.outOfTheBoxScrapeConfigs.xl.lightweight }}
      scrape_interval: 5m
      metric_relabel_configs:
        - action: keep
          source_labels:
            - __name__
          regex: "jvm_gc_collection_seconds_sum|\
                  jvm_memory_bytes_used|\
                  jvm_memory_bytes_max|\
                  mediation_ongoing_full_discoveries"
      {{- else }}
      scrape_interval: 20s
      {{- end }}
      kubernetes_sd_configs:
        - role: endpoints
          {{- if not $root.Values.server.useClusterRole }}
          namespaces:
            own_namespace: true
          {{- end }}
      relabel_configs:
        - source_labels:
            - __meta_kubernetes_service_name
          regex: ^(mediation-.*)$
          action: keep
        - source_labels:
            - __meta_kubernetes_endpoint_port_name
          regex: ^(tcp-.*)$
          action: drop
        - source_labels:
            - __meta_kubernetes_service_name
          regex: ^(mediation-.*)$
          action: replace
          replacement: xl
          target_label: job
        - source_labels:
            -  __meta_kubernetes_service_name
          regex: ^(mediation-.*)$
          action: replace
          replacement: $1
          target_label: service
        - source_labels:
            - __meta_kubernetes_service_name
          action: replace
          replacement: mediation
          target_label: component
        - source_labels:
            - __meta_kubernetes_endpoint_node_name
          target_label: node
          action: replace
        - source_labels:
            - __meta_kubernetes_namespace
          target_label: namespace
          action: replace

      # Scrape config for XL mysql.
      #
    - job_name: 'xl-mysql'
      {{- if $root.Values.server.outOfTheBoxScrapeConfigs.xl.lightweight }}
      scrape_interval: 5m
      metric_relabel_configs:
        - action: keep
          source_labels:
            - __name__
          regex: "mysql_global_status_innodb_buffer_pool_bytes_data|\
                  mysql_global_variables_innodb_buffer_pool_size|\
                  mysql_global_status_innodb_buffer_pool_reads|\
                  mysql_global_status_innodb_buffer_pool_read_requests|\
                  mysql_global_status_threads_connected|\
                  mysql_global_variables_max_connections|\
                  mysql_global_status_commands_total"
      {{- end }}
      kubernetes_sd_configs:
        - role: pod
          {{- if not $root.Values.server.useClusterRole }}
          namespaces:
            own_namespace: true
          {{- end }}
      relabel_configs:
        - source_labels:
            - __meta_kubernetes_pod_label_app
          regex: prometheus-mysql-exporter
          action: keep
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - source_labels:
            - __meta_kubernetes_pod_host_ip
          action: replace
          target_label: host_ip
        - source_labels:
            - __meta_kubernetes_pod_label_app
          action: replace
          replacement: xl
          target_label: job
        - source_labels:
            - __meta_kubernetes_pod_label_app
          action: replace
          replacement: db
          target_label: service
        - source_labels:
            - __meta_kubernetes_pod_label_app
          action: replace
          replacement: db
          target_label: component
        - source_labels:
            - __meta_kubernetes_namespace
          action: replace
          target_label: namespace

      # Scrape config for kube-state-metrics used by health checks
      #
    - job_name: 'xl-health-checks'
      scrape_interval: 1m
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            own_namespace: true
      relabel_configs:
        - action: keep
          source_labels:
            - __meta_kubernetes_service_name
          regex: {{ (index $root.Values "kube-state-metrics").fullnameOverride }}
        - action: keep
          source_labels:
            - __meta_kubernetes_endpoint_port_name
          regex: http
        - action: replace
          source_labels:
            - __meta_kubernetes_service_name
          target_label: service
        - action: replace
          source_labels:
            - __meta_kubernetes_endpoint_node_name
          target_label: node
        - action: replace
          source_labels:
            - __meta_kubernetes_namespace
          target_label: namespace
{{- end }}
{{- if or ($root.Values.alertmanager.enabled) ($root.Values.server.alertmanagers) }}
    alerting:
{{- if $root.Values.alertRelabelConfigs }}
{{ $root.Values.alertRelabelConfigs | toYaml  | trimSuffix "\n" | indent 6 }}
{{- end }}
      alertmanagers:
{{- if $root.Values.server.alertmanagers }}
{{ toYaml $root.Values.server.alertmanagers | indent 8 }}
{{- else }}
      - kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - {{ $root.Release.Namespace }}
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        {{- if $root.Values.alertmanager.prefixURL }}
        path_prefix: {{ $root.Values.alertmanager.prefixURL }}
        {{- end }}
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          regex: {{ $root.Release.Namespace }}
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: {{ template "prometheus.name" $root }}
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_probe]
          regex: {{ index $root.Values.alertmanager.podAnnotations "prometheus.io/probe" | default ".*" }}
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex:
          action: drop
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
