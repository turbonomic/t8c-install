apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "grafana.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "grafana.name" . }}
    chart: {{ template "grafana.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
{{- if .Values.plugins }}
  plugins: {{ join "," .Values.plugins }}
{{- end }}
  {{- $deploymentMode := index .Values "global" "deploymentMode" | default "_default" }}
    # grafana config generated for deployment mode '{{- $deploymentMode -}}'
  {{ $iniValues := mergeOverwrite 
        (index .Values "grafana.ini")
        (index .Values "grafana.ini.defaults" "_base")
        (index .Values "grafana.ini.defaults" $deploymentMode)
    -}}
  {{/* the grafana.ini file needs `host` to include a nonstanard port in host:port format; we
       cannot supply them separately, which is how they currently appear in $iniValues */}}
  {{ $port := (and .Values.global (eq .Values.global.deploymentMode "SAAS")) | ternary
      ((and .Values.global.externalDBName (not .Values.global.externalDbIP)
            .Values.global.externalDbPort) | default 3306)
      ((and .Values.global .Values.global.externalTimescaleDBName
            (not .Values.global.externalTimescaleDBIP)
            .Values.global.externalTimescaleDBPort) | default 5432) }}
  {{ $iniValues := set $iniValues.database "host" (printf "%s:%d" $iniValues.database.host $port) }}
  grafana.ini: |
{{- range $key, $value := index .Values "grafana.ini" }}
    [{{- $key -}}]
{{- range $elem, $elemVal := $value }}
    {{ $elem }} = {{ or (and (not (kindIs "invalid" $elemVal)) (toString $elemVal))
        (index $iniValues $key $elem) }}
{{- end }}
{{ end -}}

{{- if .Values.datasources }}
{{ $root := . }}
  {{- range $key, $value := .Values.datasources }}
  {{ $key }}: |
{{ tpl (toYaml $value | indent 4) $root }}
  {{- end -}}
{{- end -}}

{{- if .Values.notifiers }}
  {{- range $key, $value := .Values.notifiers }}
  {{ $key }}: |
{{ toYaml $value | indent 4 }}
  {{- end -}}
{{- end -}}

{{- if .Values.dashboardProviders }}
  {{- range $key, $value := .Values.dashboardProviders }}
  {{ $key }}: |
{{ toYaml $value | indent 4 }}
  {{- end -}}
{{- end -}}

{{- if .Values.dashboards  }}
  download_dashboards.sh: |
    #!/usr/bin/env sh
    set -euf
    {{- if .Values.dashboardProviders }}
      {{- range $key, $value := .Values.dashboardProviders }}
        {{- range $value.providers }}
    mkdir -p {{ .options.path }}
        {{- end }}
      {{- end }}
    {{- end }}

  {{- range $provider, $dashboards := .Values.dashboards }}
    {{- range $key, $value := $dashboards }}
      {{- if (or (hasKey $value "gnetId") (hasKey $value "url")) }}
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
      {{- if not $value.b64content }}
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      {{ end }}
    {{- if $value.url -}}{{ $value.url }}{{- else -}} https://grafana.com/api/dashboards/{{ $value.gnetId }}/revisions/{{- if $value.revision -}}{{ $value.revision }}{{- else -}}1{{- end -}}/download{{- end -}}{{ if $value.datasource }}| sed 's|\"datasource\":[^,]*|\"datasource\": \"{{ $value.datasource }}\"|g'{{ end }}{{- if $value.b64content -}} | base64 -d {{- end -}} \
    > /var/lib/grafana/dashboards/{{ $provider }}/{{ $key }}.json
      {{- end -}}
    {{- end }}
  {{- end }}
{{- end }}
